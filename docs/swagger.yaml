basePath: /api
definitions:
  gorm.DeletedAt:
    properties:
      time:
        type: string
      valid:
        description: Valid is true if Time is not NULL
        type: boolean
    type: object
  model.Account:
    properties:
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      email:
        type: string
      firstname:
        type: string
      id:
        type: integer
      lastname:
        type: string
      permission:
        type: integer
      todos:
        items:
          $ref: '#/definitions/model.Todo'
        type: array
      updatedAt:
        type: string
    required:
    - email
    type: object
  model.Todo:
    properties:
      completed:
        type: boolean
      completedAt:
        format: date-time
        type: string
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      description:
        type: string
      fkAccountId:
        type: integer
      id:
        type: integer
      title:
        minLength: 1
        type: string
      updatedAt:
        type: string
    required:
    - title
    type: object
  pagination.Meta:
    properties:
      hasNextPage:
        type: boolean
      hasPrevPage:
        type: boolean
      limit:
        type: integer
      nextPage:
        type: integer
      offset:
        type: integer
      page:
        type: integer
      prevPage:
        type: integer
      skip:
        type: integer
      total:
        type: integer
      totalPages:
        type: integer
    type: object
  types.AuthResponse:
    properties:
      auth:
        $ref: '#/definitions/types.AuthResponseBody'
    type: object
  types.AuthResponseBody:
    properties:
      refreshToken:
        type: string
      token:
        type: string
    type: object
  types.CreateTodoRequest:
    properties:
      todo:
        $ref: '#/definitions/model.Todo'
    type: object
  types.CreateTodoResponse:
    properties:
      todo:
        $ref: '#/definitions/model.Todo'
    type: object
  types.GetMeResponse:
    properties:
      account:
        $ref: '#/definitions/model.Account'
      auth:
        $ref: '#/definitions/types.AuthResponseBody'
    type: object
  types.GetTodoResponse:
    properties:
      todo:
        $ref: '#/definitions/model.Todo'
    type: object
  types.GetTodosResponse:
    properties:
      _meta:
        $ref: '#/definitions/pagination.Meta'
      todos:
        items:
          $ref: '#/definitions/model.Todo'
        type: array
    type: object
  types.LoginDTO:
    properties:
      account:
        $ref: '#/definitions/types.LoginDTOBody'
    type: object
  types.LoginDTOBody:
    properties:
      email:
        type: string
      password:
        maxLength: 100
        minLength: 6
        type: string
    required:
    - email
    - password
    type: object
  types.RegisterDTO:
    properties:
      account:
        $ref: '#/definitions/types.RegisterDTOBody'
    type: object
  types.RegisterDTOBody:
    properties:
      confirmPassword:
        maxLength: 100
        minLength: 6
        type: string
      email:
        type: string
      firstname:
        minLength: 2
        type: string
      lastname:
        minLength: 2
        type: string
      password:
        maxLength: 100
        minLength: 6
        type: string
    required:
    - confirmPassword
    - email
    - password
    type: object
  types.UpdateTodoRequest:
    properties:
      todo:
        $ref: '#/definitions/model.Todo'
    type: object
  types.UpdateTodoResponse:
    properties:
      todo:
        $ref: '#/definitions/model.Todo'
    type: object
info:
  contact:
    name: API Support
    url: https://github.com/nleiva/go-todo-api
  description: A modern, fast, and secure REST API for managing TODO items, built
    with Go, Fiber, GORM, and HTMX.
  title: Go TODO API
  version: "1.0"
paths:
  /accounts:
    get:
      consumes:
      - application/json
      parameters:
      - example: '[amount][gte]=5 or [fk_id]=5. This can be given multiple times'
        in: query
        name: filters
        type: string
      - default: 10
        example: 10
        in: query
        minimum: 1
        name: limit
        type: integer
      - default: id asc
        example: id asc
        in: query
        name: order
        type: string
      - default: 1
        example: 1
        in: query
        minimum: 1
        name: page
        type: integer
      - example: test@test.com
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Account'
            type: array
      summary: List accounts
      tags:
      - accounts
  /accounts/{id}:
    get:
      consumes:
      - application/json
      description: get string by ID
      parameters:
      - description: Account ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Account'
      summary: Get account
      tags:
      - accounts
  /auth/login:
    put:
      consumes:
      - application/json
      parameters:
      - description: Account
        in: body
        name: account
        required: true
        schema:
          $ref: '#/definitions/types.LoginDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.AuthResponse'
      summary: Login
      tags:
      - auth
  /auth/me:
    get:
      consumes:
      - application/json
      description: Get current authenticated user's account information and refresh
        tokens
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.GetMeResponse'
      security:
      - BearerAuth: []
      summary: Get current user profile
      tags:
      - auth
  /auth/refresh:
    put:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.AuthResponse'
      summary: Refresh
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      parameters:
      - description: Account
        in: body
        name: account
        required: true
        schema:
          $ref: '#/definitions/types.RegisterDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.AuthResponse'
      summary: Register
      tags:
      - auth
  /todos:
    get:
      consumes:
      - application/json
      parameters:
      - example: '[amount][gte]=5 or [fk_id]=5. This can be given multiple times'
        in: query
        name: filters
        type: string
      - default: 10
        example: 10
        in: query
        minimum: 1
        name: limit
        type: integer
      - default: id asc
        example: id asc
        in: query
        name: order
        type: string
      - default: 1
        example: 1
        in: query
        minimum: 1
        name: page
        type: integer
      - example: test@test.com
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.GetTodosResponse'
      summary: List todos
      tags:
      - todos
    post:
      consumes:
      - application/json
      description: Create todo
      parameters:
      - description: Todo
        in: body
        name: todo
        required: true
        schema:
          $ref: '#/definitions/types.CreateTodoRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.CreateTodoResponse'
      summary: Create todo
      tags:
      - todos
  /todos/{id}:
    delete:
      consumes:
      - application/json
      description: Delete todo
      parameters:
      - description: Todo ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
      summary: Delete todo
      tags:
      - todos
    get:
      consumes:
      - application/json
      description: get string by ID
      parameters:
      - description: Todo ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.GetTodoResponse'
      summary: Get todo
      tags:
      - todos
    put:
      consumes:
      - application/json
      description: Update todo
      parameters:
      - description: Todo ID
        in: path
        name: id
        required: true
        type: integer
      - description: Todo
        in: body
        name: todo
        required: true
        schema:
          $ref: '#/definitions/types.UpdateTodoRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.UpdateTodoResponse'
      summary: Update todo
      tags:
      - todos
schemes:
- http
- https
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
